name: SAST Scan with Semgrep

on:
  workflow_dispatch:
  #push:
  #  branches:
  #    - main
  #pull_request:
  #  branches:
  #    - main


jobs:
  semgrep_scan:
    name: Semgrep SAST Scan
    runs-on: self-hosted 

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    #- name: Set up Python
    #  uses: actions/setup-python@v4
    #  with:
    #    python-version: '3.11'

    #- name: Install Semgrep and jq (Arch-based)
    #  run: |
    #    sudo pacman -Syu --noconfirm semgrep jq

    - name: Ensure Semgrep is in PATH
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Login to Semgrep
      run: |
        semgrep logout
        SEMGREP_APP_TOKEN=c83b422a5b980e2dcde6d23341e73e1d1223e757c0f9e7933dbacdba4b77affd semgrep login

    - name: Run Semgrep scan
      run: |
        semgrep scan --config p/owasp-top-ten --config semgrep.yml --config p/security-audit --config p/csharp --include '**/*.cs' --output semgrep-results.json --json
    - name: Set variables
      run: |
        echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
        echo "ENGAGEMENT_NAME=Auto Engagement - ${{ github.run_id }}" >> $GITHUB_ENV

    - name: Create Engagement in DefectDojo
      id: create_engagement
      run: |
          response=$(curl -s -k -X POST "http://localhost:8080/api/v2/engagements/" \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "name": "${{ env.ENGAGEMENT_NAME }}",
            "product": ${{ env.PRODUCT_ID }},
            "target_start": "${{ env.DATE }}",
            "target_end": "${{ env.DATE }}",
            "status": "In Progress",
            "engagement_type": "CI/CD"
          }
          EOF
          )
          echo "$response"
          echo "ENGAGEMENT_ID=$(echo "$response" | jq -r '.id')" >> $GITHUB_ENV
      env:
          PRODUCT_ID: ${{ secrets.DEFECTDOJO_PRODUCT_ID }}

    - name: Notify Google Chat on High/Critical Findings
      if: always()
      run: |
          # Check if there are High or Critical findings
            HIGH_OR_CRITICAL=$(jq '[.results[] | select(.extra.severity == "CRITICAL")] | length' semgrep-results.json)
        
            if [ "$HIGH_OR_CRITICAL" -gt 0 ]; then
            MESSAGE="⚠️ Semgrep scan found Critical vulnerability(ies) in commit $GITHUB_SHA by $GITHUB_ACTOR. Check results in DefectDojo or GitHub logs."
        
            curl -X POST "${{ secrets.GCHAT_WEBHOOK }}" \
              -H "Content-Type: application/json" \
              -d "{\"text\": \"$MESSAGE\"}"
            else
              echo "No High or Critical vulnerabilities found. Skipping notification."
            fi
          


    - name: Upload to DefectDojo
      run: |
        curl -k -X POST "http://localhost:8080/api/v2/import-scan/" \
        -H "Authorization: Token ${{ secrets.DEFECTDOJO_API_KEY }}" \
        -F "scan_type=Semgrep JSON Report" \
        -F "file=@semgrep-results.json" \
        -F "engagement= ${{ env.ENGAGEMENT_ID }}" \
        -F "minimum_severity=Low" \
        -F "active=true" \
        -F "verified=false"

      
